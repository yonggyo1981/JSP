세션 
	브라우저별 개인화된 데이터 
	
	쿠키와 차이점)
	브라우저에서 값이 저장, 만약 서버에서 데이터 조회가 필요하다면 
			-> 브라우저에서 -> 서버로 전송 
				(Request Header - cookie 항목을 전송)
			-> 쿠키 정보가 네트워크상에서 전달이 된다.
			-> 정보 노출이 쉽다(보안에 취약하다)
			-> 개인화된 서비스를 제공하려면 반드시 쿠키는 필요
			
			
	세션과 차이점 
		-> 노출되는 데이터를 노출 X
		-> 데이터를 브라우저가 아니라 서버에서 저장하고, 서버 내에서 조회
		-> 데이터가 헤더를 통해서 전달 X(패킷을 통해서 정보 노출 X)
		-> Request 헤더에 정보 X 
		-> 단, 서버에서 개인화된 데이터를 찾기 위한 쿠키 키 값이 필요하다
		(세션은 반드시 쿠키가 필요하다 - JSESSIONID - 브라우저마다 다른 값)
		74B7D956C6A1304D790D5692FBBFD792
		3A39BC3489712F71E4D0778565B823B6
		-> 세션의 유효기간은 브라우저 창이 닫히기 전까지 
		
	javax.servlet.http.HttpSession
	
	HttpSession session 
	1) JSP 내의 내장객체 session 인스턴스
	
	2) HttpServletRequest - HttpSession getSession()
	
	request, pageContext, session, application - 속성을 관리하는 내장 객체
	
	세션설정 
		HttpSession
				.setAttribute(String name, Object value);
	세션조회
		HttpSession
				Object getAttribute(String name)
				- 반환 자료형 Object -> 형변환
				
				Enumertaion getAttributeNames() - 세션 이름들
				
	세션삭제
		HttpSession
				void removeAttribute(String name) 
				
	세션 전체삭제(세션 비우기)
		HttpSession	
			invalidate() 
			
	기타
		.setMaxInactiveInterval(int interval) - 세션 유지 시간(초단위) - 기본값 1800 - 30분간 유지 (60 * 60 * 24)
		.getMaxInactiveInterval() - 세션유지시간 조회
		.long getCreationTime() -> 새션이 생성된 시간(천분의 일초 단위)
		.getId() -> JSESSIONID
		.long getLastAccessdTime() -> 마지막으로 클라이언트가 접속한 시간
		
P433
16 
request.isRequestedSessionIdValid()