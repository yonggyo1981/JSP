1. URL
	회원 가입 - /member/join - GET - 회원가입 양식 
									   - POST - 회원가입 처리
		
	로그인 - /member/login - GET - 로그인 양식 
									- POST - 로그인 처리
									
									
2. 공통 필터 
	- 헤더, 푸터(contentType='text/html')
	- 유의점 - 정적자원은 제외 
	
	
	http://localhost:8080/Login/member/join
	
	
	
소스 설명
1. URL 
package com.controller.member
서블릿
	- JoinController 
			- doGet  - 회원 가입 양식(GET)
			- doPost - 회원 가입 처리(POST)
				- MemberDao - join(HttpServletRequest request)
				(회원 가입 처리)
				 - 회원 가입 실패 -> AlertException -> 오류 안내 
				 - 회원 가입 성공 -> /member/login 페이지로 이동 
				
	- LoginController 
			- doGet - 로그인 양식(GET)
			- doPost - 로그인 처리(POST)
					MemberDao - login(HttpServletRequest request)
					- 로그인 실패 -> AlertException -> 오류 안내
					- 로그인 성공 -> 메인 페이지로 이동
					  (예외가 발생 안하면 -> 성공)
					  
					-> 로그인 성공 -> 공통 필터
					-> 공통필터
						- 로그인 유지를 위한 로직
						- 세션에서 memNo가 있으면 
						- 회원정보를 전역에 유지
						- request.setAttribute 회원정보를 유지
					
	- LogoutController
			- doGet - 로그아웃 처리(GET)
				- 세션 비우기 (memNo 삭제 -> 로그아웃)
				HttpSession session 
									- invalidate()
									
				-> 로그인 페이지로 이동(response.sendRedirect()) -> 헤더에 정의된 페이지 이동
				
				response header 
					- Location : /member/login
					
				-> 헤더는 HTML이 출력 되기전에 처리
				-> HTML이 출력이 되면 더이상 헤더를 조작 할 수 X
				
web.xml - 서블릿 URL 설정


2. Models 
	- MemberDao 클래스
		- init(ServletRequest request) 
				- 로그인을 한 경우 로그인 정보 유지(session - memNo)
				-  사이트 전역에 유지 -> 사이트 전역에 해당하는 위치
				- 전역 필터(/*) - 
					com.filter.CommonFilter
						- doFilter 바로 하단에
						 Member.init(ServletRequest request)
							
							
				- 로그인한 회원정보(member), 로그인 여부(isLogin)
				- request.setAttribute("member", member);
		
		 
		
		
		- join(HttpServletRequest request) throws AlertException
			- 회원 가입 처리
			- 1. 입력 데이터 검증
				checkJoinData(request) throws AlertException;
					1. 필수 항목체크
					2. 아이디체크(자리수 + 형식(알파벳+숫자))
					3. 비밀번호체크(자리수 + 복잡성)
					4. 아이디 중복 여부 - DB로 조회 개수가 1개 이상 - 이미 존재
					5. 비밀번호 확인 일치 여부
					
					체크 실패 AlertException 발생 -> 오류 안내
					
			2. 검증 완료 -> DB 처리 
				DB 처리전 비밀번호는 hash 처리(BCrypt 방식)
				DB 처리 
					-> 가입 후 바로 로그인 처리 -> 회원번호 필요한 경우?
					Connection  - prepareStatement(String sql, Statement.RETURN_GENERATED_KEYS));
					-> 추가시에 추가된 증감 번호(Primary - Auto Increment)
					
					PreparedStatment 
							- ResultSet getGeneratedKeys();

			- login(HttpServletRequest request) 
			  login(HttpServletRequest request, String memId, String memPw) -> 로그인 계정을 다르게 로그인 하는 경우(관리자)
				1. 필수 항목 체크(아이디, 비번)
				2. 아이디로 회원 정보 조회
				3. 회원정보 있으면 비밀번호 검증
					BCrypt.checkpw(비밀번호, 해시)
				4. 아이디, 비번 일치 -> 로그인 처리
					HttpSession session 
						- memNo를 저장해서 
						- 공통 필터에서 회원 정보를 
						전역 유지 -> 로그인 유지
						
						- setAttribute("memNo", memNo);
						
				1~4번에 실패하면 
				AlertException 발생 -> 안내 
				
				1~4번 다 통과 -> 로그인 성공